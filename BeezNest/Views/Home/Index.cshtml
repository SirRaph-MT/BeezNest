@model Core.ViewModels.UploadProductsViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Home Page";
}

<style>

    .product-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
        background-color: #fff;
        transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
    }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        /* Card image styling */
        .product-card .card-img-top {
            height: 180px;
            object-fit: cover;
            border-bottom: 1px solid #ddd;
        }

        /* Card body */
        .product-card .card-body {
            padding: 1rem;
            text-align: center;
        }

        .product-card .card-title {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #333;
        }

        .product-card .specifications,
        .product-card .price,
        .product-card .numberOfItem {
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
            color: #555;
        }

    /* Quantity controls */
    .quantity-controls {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 1rem;
    }

        .quantity-controls .quantityInput {
            width: 60px;
            height: 38px;
            text-align: center;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin: 0 0.5rem;
        }

        .quantity-controls .btn {
            width: 38px;
            height: 38px;
            font-size: 1rem;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
        }

    /* Buttons */
    .product-card .btn {
        width: 48%;
        font-size: 0.9rem;
        margin-top: 0.5rem;
        transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;
    }

    .product-card .btn-dark {
        background-color: #333;
        color: #fff;
    }

        .product-card .btn-dark:hover {
            background-color: #444;
        }

    .product-card .btn-warning {
        background-color: #ffc107;
        color: #fff;
    }

        .product-card .btn-warning:hover {
            background-color: #e0a800;
        }
</style>

<div class="container">
    <div class="row">
        @foreach (var product in Model.ListUploadProducts)
        {
            <div class="col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2 mb-4">
                <div class="product-card">
                    <input type="hidden" class="productId" value="@product.Id" />
                    <!-- Product Image -->
                    <img src="@product.ProductImages?.FirstOrDefault()?.ImageUrl" class="card-img-top" alt="@product.ProductsModel" />

                    <!-- Product Details -->
                    <div class="card-body">
                        <h5 class="card-title">@product.ProductsModel</h5>
                        <p class="specifications"><strong>Specifications:</strong> @product.Specifications</p>
                        <p class="price"><strong>Price:</strong> ₦@product.Price?.ToString("N2")</p>
                        <p class="numberOfItem"><strong>Item left:</strong> @product.NumberOfItem</p>
                    </div>

                    <!-- Quantity Controls -->
                    <div class="quantity-controls">
                        <button type="button" class="btn btn-outline-secondary" onclick="decreaseQuantity(this)">-</button>
                        <input type="text" class="quantityInput" value="1" readonly data-max-quantity="@product.NumberOfItem" />
                        <button type="button" class="btn btn-outline-secondary" onclick="increaseQuantity(this)">+</button>
                    </div>

                    <!-- Action Buttons -->
                    <div class="d-flex justify-content-between px-2">
                        <button class="btn btn-dark" onclick="addToCart(this)">Add to Cart</button>
                        <a asp-controller="Home" asp-route-productId="@product.Id" asp-action="ProductDetails" class="btn btn-warning">View Details</a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>



<!--Question Accordion-->
<section id="Questions" class="p-5">
    <h2 class="text-center mb-4">Frequently Asked Questions</h2>
    <div class="accordion accordion-flush" id="FAQsAccordion">
        @foreach (var faq in Model.FAQs)
        {
            <div class="accordion-item">
                <h2 class="accordion-header" id="heading-@faq.Id">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@faq.Id" aria-expanded="false" aria-controls="collapse-@faq.Id">
                        <strong>@faq.Questions</strong>
                    </button>
                </h2>
                <div id="collapse-@faq.Id" class="accordion-collapse collapse" aria-labelledby="heading-@faq.Id" data-bs-parent="#FAQsAccordion">
                    <div class="accordion-body">
                        <p>@faq.Answers</p>
                    </div>
                </div>
            </div>
        }
    </div>
</section>



<script>
    function decreaseQuantity(button) {
        // Find the quantity input element
        var quantityInput = button.parentElement.querySelector('.quantityInput');
        var currentValue = parseInt(quantityInput.value);

        // Decrease value only if greater than 1
        if (currentValue > 1) {
            quantityInput.value = currentValue - 1;
        }
    }

    function increaseQuantity(button) {
        // Find the quantity input element
        var quantityInput = button.parentElement.querySelector('.quantityInput');
        var maxQuantity = parseInt(quantityInput.getAttribute('data-max-quantity'));
        var currentValue = parseInt(quantityInput.value);

        // Increase value only if less than maxQuantity
        if (currentValue < maxQuantity) {
            quantityInput.value = currentValue + 1;
        }
    }
</script>

